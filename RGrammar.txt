Program                  :   Function
Function                 :   ReturnType ID "("(TypeName Variable)*")" "{" (VarDeclaration)* (Expression ";")* ReturnStatement "}"
Expression               :   AssignmentExpression 
AssignmentExpression     :   (Variable ( "=" | "+=" | "-=" | "*=" | "/=" | "%="  | ">>="  | "<<="  | "&="  | "|="  | "^=" ))? ConditionalExpression
ConditionalExpression    :   LogicalORExpression         ( "?" Expression ":" AssignmentExpression )*
LogicalORExpression      :   LogicalXORExpression        ( "||" LogicalXORExpression )*
LogicalXORExpression     :   LogicalANDExpression        ( "^^" LogicalANDExpression )*
LogicalANDExpression     :   BitwiseORExpression         ( "&&" BitwiseORExpression )*
BitwiseORExpression      :   BitwiseXORExpression        ( "|" BitwiseXORExpression )*
BitwiseXORExpression     :   BitwiseANDExpression        ( "^" BitwiseANDExpression )*
BitwiseANDExpression     :   EqualityExpression          ( "&" EqualityExpression )*
EqualityExpression       :   RelationalExpression        ( ( "==" | "!=" ) RelationalExpression )*
RelationalExpression     :   ShiftExpression             ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression )*
ShiftExpression          :   AdditiveExpression          ( ( "<<" | ">>" ) AdditiveExpression )*
AdditiveExpression       :   MultiplicativeExpression    ( ( "+" | "-" ) MultiplicativeExpression )*
MultiplicativeExpression :   UnaryExpression             ( ( "*" | "/" | "%" ) UnaryExpression )*
UnaryExpression          :   (( "++" | "--" ) | ( "+" | "-" | "~" | "!" | "("TypeName")" )*) PostFixExpression
PostFixExpression        :   ( Variable ( "++" | "--" ) ) | PrimaryExpression
PrimaryExpression        :   Value | Symbol | "(" Expression ")"
Symbol                   :   Data | VariableID
VarDeclaration           :   TypeName Variable ";"
ReturnStatement          :   "return"  Expression ? ";"
ReturnType               :   TypeName | "Void"
TypeName                 :   "Integer" | "Double" | "Bool" | "String"   ## Parsed by the LEXER
Data                     :   "D"Integer                                 ## Parsed by the LEXER
VariableID               :   ID
Value                    :   Integer | Double | Bool | String           ## Parsed by the LEXER
Integer                  :   (0-9)+
Double                   :   (0-9)+.(0-9)+
Bool                     :   "true" | "false"
String                   :   "(a-z | 0-9)*"
ID                       :   ( "_" | a-z ) ( "_" | a-z | 0-9)*