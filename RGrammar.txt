Program                  :   Function
Function                 :   ReturnType ID "("(VarDeclaration)*")" "{" (VarDeclaration ";")* (Expression ";")* ReturnStatement "}"
ReturnType               :   TypeName | "Void"
VarDeclaration           :   TypeName VariableID 
ReturnStatement          :   "return"  Expression? ";"
Expression               :   AssignmentExpression 
AssignmentExpression     :   (VariableID ( "=" | "+=" | "-=" | "*=" | "/=" | "%="  | ">>="  | "<<="  | "&="  | "|="  | "^=" ))? ConditionalExpression
ConditionalExpression    :   LogicalORExpression         ( "?" Expression ":" AssignmentExpression )*
LogicalORExpression      :   LogicalXORExpression        ( "||" LogicalXORExpression )*
LogicalXORExpression     :   LogicalANDExpression        ( "^^" LogicalANDExpression )*
LogicalANDExpression     :   BitwiseORExpression         ( "&&" BitwiseORExpression )*
BitwiseORExpression      :   BitwiseXORExpression        ( "|" BitwiseXORExpression )*
BitwiseXORExpression     :   BitwiseANDExpression        ( "^" BitwiseANDExpression )*
BitwiseANDExpression     :   EqualityExpression          ( "&" EqualityExpression )*
EqualityExpression       :   RelationalExpression        ( ( "==" | "!=" ) RelationalExpression )*
RelationalExpression     :   ShiftExpression             ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression )*
ShiftExpression          :   AdditiveExpression          ( ( "<<" | ">>" ) AdditiveExpression )*
AdditiveExpression       :   MultiplicativeExpression    ( ( "+" | "-" ) MultiplicativeExpression )*
MultiplicativeExpression :   UnaryExpression             ( ( "*" | "/" | "%" ) UnaryExpression )*
UnaryExpression          :   (( "++" | "--" ) VariableID) | (( "+" | "-" | "~" | "!" | "("TypeName")" )* PostFixExpression)
TypeName                 :   "Integer" | "Double" | "Bool" | "String"   ## Parsed by the LEXER
PostFixExpression        :   ( VariableID ( "++" | "--" ) ) | PrimaryExpression
PrimaryExpression        :   Value | Symbol | "(" Expression ")"
Symbol                   :   Data | VariableID
Data                     :   "D"Integer                                 ## Parsed by the LEXER
VariableID               :   ID
Value                    :   Integer | Double | Bool | String           ## Parsed by the LEXER
Integer                  :   \d+
Double                   :   \d+"."\d+
Bool                     :   "true" | "false"
String                   :   "(\w*)"
ID                       :   ( [_a-zA-Z] \w* )